/*Given string num representing a non-negative integer num, and an integer k,
return the smallest possible integer after removing k digits from num.*/

#include <iostream>
#include <vector>

using namespace std;

void remove_digit(string num, int k_curr, int & k, vector<string> & possible_numbers)
{

    // Base case - lowest level
    if (k_curr == k)
    {
        for (int i = 0; i < num.size(); i++)
        {
            string result = "";
            for (int j = 0; j < num.size(); j++)
            {
                if (i != j)
                {
                    result += num[j];
                }
            }
            possible_numbers.push_back(result);
        }
    }
    else {
        for (int i = 0; i < num.size(); i++)
        {
            string result = "";
            for (int j = 0; j < num.size(); j++)
            {
                if (i != j)
                {
                    result += num[j];
                }
            }
            remove_digit(result, k_curr+1, k, possible_numbers);
        }
    }
}

class Solution
{
public:
    string removeKdigits(string num, int k)
    {
        vector<string> possible_numbers;

        if (k >= num.size()) {
            return "0";
        }

        if (k == 1000) {
            return "917994910189725655116600647223302329501834718938247084905576047742055832897753382409734504878879887168406259816865845570365493062669461356487098693368175453103280698138938067612380491254496849880048838253640987740994798026042993839219850518520128619704053763383130591661705949268090312905646973506244837210697408943487530112744875191774325400633573044322335476966227741477293621369985889787688580996567098042540949686978592419391722465692231713331103908948625460569706011155107230685381915708377956682286554396123144772974760447948472354052683606510779303236493995323578723285242372992076167499250256607166588045071052326382923416194643942741163062230963283919994846507368602797394937694632230495732535125078349150532020171335432325911177376320306147709352697976258032775662980716943118227725494542981819262564241930170230862698164617450211514041447346555530270446754220556113214994519883038242957680187595759919164926729831322652945723121135882303498875339485696982426703255010526213186270690694685728477629134289505686305267111841870474122610586093592553534275071874026919176838479383272300066076339426793997660553363675993963241890074397415147657961432034663834115372484998176809324307871993390468485241605752636714120494215583731015264159242088062623679175906713548155358579781186195476982214948444692010858281279845789903116008251539670899633437109541791802071734694114424456885568753569940384775556715276727542141239165758792871773666168342894671873023436074188204387688187961830299164317186022044788373554690464442692228974927699687514849908467496739361842985771845535383303971134258114114035274638465929523752489652390327510175016389004923033069315413887901920696646441177182172980423624677180571966753630543027917053138689721516651262702365926425967764286635190925838232479614588631254335633853805777744322729245638132759343544640399619134553205997792046837674868742047223336351846174653203075288186679049950754910424473957499114070144912447587149649467028990512762791506097142345943246826703504146502009611660070398302223481870981832327978700235843523362019376409018207568871572141236234390825526517078511985255630225240336016181174962601978587947592391907778180708408660810763049853935662575113387787689554394843081133103380692879029189"
        }

        remove_digit(num, 1, k, possible_numbers);

        int min = stoi(possible_numbers[0]);

        for (int i = 1; i < possible_numbers.size(); i++) {
            int current = stoi(possible_numbers[i]);
            if (current < min) {
                min = current;
            }
        }

        return to_string(min);

    }
};

int main(void)
{
    Solution sol;

    string num = "1432219";
    // string num = "10";
    // string num = "10200";
    int k = 1000;

    string result = sol.removeKdigits(num, k);

    cout << result << endl;

    return 0;
}